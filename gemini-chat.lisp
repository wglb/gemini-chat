;;;; gemini-chat.lisp
;;;; -*- Mode: Lisp; indent-tabs-mode: nil -*-

(in-package #:gemini-chat)

(declaim (optimize (speed 0) (safety 3) (debug 3) (space 0)))

;; A default tag to use if none is provided on the command line.
(defparameter *d-tag* "chat")

;; New special variable for the runtime output file stream
(defparameter *run-out-s* nil
  "Stream for saving conversation answers during a conversation.")

;; Global for help formatting
(defparameter *help-column-width* 80)

;; Log file base name for xlg-lib
(defparameter *log-file-base* "gemini-chat-log"
  "Base name for the log files generated by xlg-lib.")

;; Function to retrieve the current version
(defun get-version ()
  (slot-value (asdf:find-system 'gemini-chat) 'asdf:version))

;; --- Define Flags using com.google.flag ---

(define-flag *keyname*
  :help "Name of gemini api key to retrieve"
  :type string
  :selector "key"
  :default-value "personal")

(define-flag *api-url*
  :help "URL for gemini api"
  :type string
  :selector "api-url"
  :default-value "https://generativelanguage.googleapis.com/v1beta/models/")

(define-flag *gemini-model*
  :help "Which model to get gemini to run"
  :type string
  :selector "model"
  :default-value "gemini-2.5-pro")

(define-flag *context*
  :help "Path to a context file. Can be specified multiple times. Example: --context file1.txt,file2.txt"
  :type list
  :parser string-identity-parser
  :selector "context"
  :default-value nil)

(define-flag *save*
  :help "File to save Gemini's responses to. Responses will be appended. Example: --save conversation.log"
  :type string
  :selector "save"
  :default-value "")

(define-flag *tag*
  :help "A unique tag for the conversation logs (default: chat). Example: --tag my-session"
  :type string
  :selector "tag"
  :default-value "chat")

(define-flag *input-files*
  :help "Comma-separated list of input files whose content will be sent with your prompt. Example: --input-files my-code.lisp,data.csv"
  :type list
  :parser string-identity-parser
  :selector "input-files"
  :default-value nil)

(define-flag *help-is*
  :help "Show this help message and exit."
  :type boolean
  :selector "help"
  :default-value nil)

(define-flag *single-shot*
  :help "Quit after first query completed"
  :type boolean
  :selector "single-shot"
  :default-value nil)

(define-flag *exit-on-error*
  :help "Exit the program immediately if an input file cannot be read."
  :type boolean
  :selector "exit-on-error"
  :default-value nil)

(defparameter *remaining-args* nil)

(defun string-identity-parser (s)
  "A parser function for com.google.flag that simply returns the string itself
   and a success boolean T. Used for list flags where each element is a string."
  (let ((full-l nil))
    (mapc #'(lambda (k)
              (push k full-l))
          (s-s s #\,))
    (values (reverse full-l) t)))

(defun s-s (str delim &key (rem-empty nil))
  "Encapsulates calls to split-sequence. Splits a string by a single character delimiter.
   :rem-empty T will remove empty strings from the result list."
  (split-sequence:split-sequence delim str :remove-empty-subseqs rem-empty))

(defun s/z (str)
  (zerop (length str)))

(defun s/nz (str)
  (plusp (length str)))

;; --- Primitives for Help Formatting ---

(defun get-sorted-flags ()
  "Retrieves and sorts the registered flags alphabetically by their selector string."
  (sort (copy-list com.google.flag::*registered-flags*)
        #'string< :key #'car))

(defun find-max-selector-length (flags)
  "Finds the maximum length of the flag selector strings for alignment."
  (let ((max-length 0))
    (dolist (flag-pair flags)
      (setf max-length (max max-length (length (car flag-pair)))))
    max-length))

(defun print-flag-help (selector flag max-selector-length)
  "Prints the help message for a single flag with proper padding using ~vt."
  (let* ((help-text (slot-value flag 'com.google.flag::help))
         (padding (+ max-selector-length 5))) ; 5 spaces to separate --selector and help text
    (format t "  --~a~vt~a~%"
            selector
            padding
            help-text)))

(defun print-help ()
  "Prints the command-line help message and example usage."
  (format t "~&gemini-chat version ~a~%~%" (get-version))
  (format t "Usage: ./gemini-chat [options] [initial_prompt]~%~%")
  (format t "Options:~%")

  (let* ((flags (get-sorted-flags))
         (max-selector-length (find-max-selector-length flags)))
    (dolist (flag-pair flags)
      (print-flag-help (car flag-pair) (cdr flag-pair) max-selector-length)))

  (format t "~%")
  (format t "Interactive Commands (during chat loop):~%")
  (format t "  :input <file1,file2,...>         Add file content to the next prompt.~%")
  (format t "  :save <filename>                 Start or change saving model responses to the specified file.~%")
  (format t "  quit                             End the conversation.~%~%")
  (format t "Initial Prompt:~%")
  (format t "~@<  If no initial prompt or input files are given, the program will prompt you interactively.~:>" *help-column-width*)
  (format t "~@<  Otherwise, all non-option arguments are treated as the initial prompt text.~:>" *help-column-width*)
  (format t "~%---~%~%")
  (format t "## Example Flow:~%~%")
  (format t "~@<To use the `gemini-chat` program with input files, a context file, a defined output file, and a prompt that references the input files, you'd use a command like this:~:>" *help-column-width*)
  (format t "~%```bash~%")
  (format t "./gemini-chat --context your_context.md --input-files code.lisp,tests.lisp --save session.log \"Based on the attached Lisp code and its tests, please suggest improvements.\"~%")
  (format t "```~%~%")
  (format t "~@<Let's break down the components of that command:~:>" *help-column-width*)
  (format t "~%* **`./gemini-chat`**: ~@<This is how you'd typically execute the compiled program.~:>" *help-column-width*)
  (format t "~%* **`--context your_context.md`**:~%")
  (format t "~@<  This flag specifies a **context file**. Its content is provided to the model for background information that should influence the response, but isn't the primary subject of your query.~:>" *help-column-width*)
  (format t "~%* **`--input-files code.lisp,tests.lisp`**:~%")
  (format t "~@<  This flag specifies one or more **input files**. The content of these files is included directly in your prompt, enclosed in markers. This is for content you want the model to directly analyze, modify, or reference.~:>" *help-column-width*)
  (format t "~%* **`--save session.log`**:~%")
  (format t "~@<  This flag tells `gemini-chat` to append all of the model's responses to the file `session.log`.~:>" *help-column-width*)
  (format t "~%* **`\"Based on the attached Lisp code...\"`**:~%")
  (format t "~@<  This is the **initial prompt**. It's the main instruction or question for the model. All non-option arguments are combined to form this prompt.~:>" *help-column-width*)
  (format t "~%---~%~%")
  (format t "### How the prompt is built:~%~%")
  (format t "~@<Internally, `gemini-chat` assembles these pieces into a single large prompt to send to the Gemini API. For the example above, the structure would look like this:~:>" *help-column-width*)
  (format t "~%```~%")
  (format t "--- Context Files --~%")
  (format t "File: your_context.md~%")
  (format t "```... content of your_context.md ...```~%")
  (format t "~%")
  (format t "--- End Context Files --~%")
  (format t "~%")
  (format t "===BEGIN_FILE: [code.lisp]===~%")
  (format t "... content of code.lisp ...~%")
  (format t "===END_FILE: [code.lisp]===~%")
  (format t "~%")
  (format t "===BEGIN_FILE: [tests.lisp]===~%")
  (format t "... content of tests.lisp ...~%")
  (format t "===END_FILE: [tests.lisp]===~%")
  (format t "~%")
  (format t "~@<My prompt: Based on the attached Lisp code and its tests, please suggest improvements.~:>" *help-column-width*)
  (format t "~%```~%~%")
  (format t "~@<This entire block of text is what gets sent to the model for the first turn of the conversation.~:>" *help-column-width*)
  (finish-output))


;; --- Primitives for JSOWN-specific data structure creation ---

(defun show-opts (&key (bad-args nil))
  "Prints the command-line options to the thinking log file, using the flag special variables."
  (xlg :option-log "~&Entering run-chat with flags:" )
  (xlg :option-log "Keyname: ~a" *keyname*)
  (xlg :option-log "Context files: ~a" *context*)
  (xlg :option-log "Save file: ~a" *save*)
  (xlg :option-log "Tag: ~a" *tag*)
  (xlg :option-log "Input files: ~a" *input-files*)
  (xlg :option-log "Help requested: ~a" *help-is*)
  (xlg :option-log "Single shot: ~a" *single-shot*)
  (xlg :option-log "Exit on error: ~a" *exit-on-error*)
  (xlg :option-log "Using model: ~a" "gemini-2.5-pro") ; Model is currently hardcoded in run-chat
  (xlg :option-log "Remaining args: ~a" *remaining-args*)
  (when bad-args
    (xlg :option-log "Unprocessed command-line options: ~s" bad-args)))

(defun chk-args (args)
  (let ((remaining-args (parse-command-line args)))
	(setf *remaining-args* remaining-args)
	(let ((badargs (loop for m in *remaining-args*
                         when (and (plusp (length m))
                                   (char= (char m 0) #\-))
                           collect m)))
      (show-opts :bad-args badargs)
      (when badargs
        (error "Unprocessed command-line options: ~s" badargs)
		#+hil (return-from chk-args nil))
	  (get-key *keyname*))
	(cond (*help-is*
		   (print-help)
		   nil)
		  (t t))))

(defun run-chat (args &key (model "gemini-2.5-pro"))
  (with-open-log-files ((:option-log "option.log" :ymd))
	(unless (chk-args args)
	  (return-from run-chat)))
  (format t "wath does save say ~s and single shot ~s~%" *save* *single-shot*)
  (run-chat-with-kw :keyname *keyname*
					:api-url *api-url*
					:gemini-model *gemini-model*
					:context-files *context*
					:single-shot *single-shot*
					:save *save*
					:tag *tag*
					:gemini-model model
					:input-files *input-files*
					:exit-on-error *exit-on-error*
					:remaining-args *remaining-args*))

(defun top ()
  "Toplevel function for the compiled gemini-chat executable.
   It retrieves arguments from sb-ext:*posix-argv* and passes them to run-chat."
  ;; com.google.flag:parse-command-line without :argv defaults to sb-ext:*posix-argv*
  ;; However, run-chat expects a list of strings, so pass (rest sb-ext:*posix-argv*)
  (format t "~&Top: we have command line args of ~%~s~%~%" sb-ext:*posix-argv*)
  (run-chat (rest sb-ext:*posix-argv*)))

(defun save-core-uncompressed ()
  "Saves the current Lisp image as an uncompressed executable for faster development."
  (format t "~&Building gemini-chat version ~a (uncompressed)~%~%" (get-version))
  (sb-ext:save-lisp-and-die "gemini-chat"
                            :toplevel #'top
                            :save-runtime-options t
                            :executable t))

(defun save-core ()
  "Saves the current Lisp image as an executable."
  (format t "~&Building gemini-chat version ~a~%~%" (get-version))
  (sb-ext:save-lisp-and-die "gemini-chat"
                            :toplevel #'top
                            :save-runtime-options t
                            :executable t
                            :compression t))
