;;;; gemini-chat.lisp
;;;; -*- Mode: Lisp; indent-tabs-mode: nil -*-

(in-package #:gemini-chat-lib)

(declaim (optimize (speed 0) (safety 3) (debug 3) (space 0)))

;; A default tag to use if none is provided on the command line.
(defparameter *d-tag* "chat")

;; New special variable for the runtime output file stream
(defparameter *run-out-s* nil
  "Stream for saving conversation answers during a conversation.")

;; Log file base name for xlg-lib
(defparameter *log-file-base* "gemini-chat-log"
  "Base name for the log files generated by xlg-lib.")

;; Function to retrieve the current version
(defun get-version ()
  (slot-value (asdf:find-system 'gemini-chat-lib) 'asdf:version))

;; --- Define Flags using com.google.flag ---


(defun get-key (keyname )
  "Retrieves the Gemini API key from ~/.key/keys.lsp. If not found,
   we use the GEMINI_API_KEY environment variable.
   Signals an error if the environment variable is not set.
   It first tries GEMINI_API-KEY, then falls back to _GEMINI_API-KEY_."
  (let* ((fn "~/.gemini/keys.lsp")
         (keys (if (probe-file fn)
                   (uiop:read-file-form fn)
                   nil)))
    (let* ((keyv (cond ((eq (type-of keyname) :keyword)
                        keyname)
                       (t (intern (string-upcase keyname) :keyword))))
           (key (cond (keys
                       (second (assoc keyv keys)))
                      (t (format t "getting key from environment ~%")
                         (getenv "GEMINI_API_KEY")))))
      (unless key
        (error "Error: The GEMINI_API_KEY environment variable is not set.
              Please set this before running this program."))
      key)))

(defun s-s (str delim &key (rem-empty nil))
  "Encapsulates calls to split-sequence. Splits a string by a single character delimiter.
   :rem-empty T will remove empty strings from the result list."
  (split-sequence:split-sequence delim str :remove-empty-subseqs rem-empty))

(defun s/z (str)
  (zerop (length str)))

(defun s/nz (str)
  (plusp (length str)))

;; --- Primitives for JSOWN-specific data structure creation ---

(defun make-text-part (text)
  "Creates a Lisp :OBJ representing a 'part' in the Gemini API JSON structure."
  (jsown:new-js ("text" text)))

(defun make-content-object (parts)
  "Creates a Lisp :OBJ representing 'content' in the Gemini API JSON structure."
  (jsown:new-js ("parts" parts)))

(defun make-message-turn (role content-parts)
  "Creates a Lisp :OBJ representing a single 'turn' (message) in the Gemini API JSON structure.
   This will be encoded by JSOWN as a JSON object."
  (jsown:new-js
    ("role" role)
    ("parts" content-parts)))

(defun make-api-request-payload (msgs)
  "Constructs the full JSON payload object for the Gemini API."
  (jsown:new-js ("contents" msgs)))

(defun api-req (msgs keyname api-url-arg &key (model "gemini-2.5-pro"))
  "Constructs and sends an HTTP POST request to the Gemini API.
   'msgs' should be a list of Lisp :OBJ structures, each representing a conversation turn.
   'model' specifies the Gemini model to use (e.g., \"gemini-2.5-pro\", \"gemini-1.5-flash\").
   Returns the response stream if successful."
  (let* ((api-key (get-key keyname))
         (api-url (format nil "~a~a:generateContent?key=~a" api-url-arg model api-key))
         (json-payload-lisp-object (make-api-request-payload msgs))
         (json-payload-string (jsown:to-json json-payload-lisp-object))
         (headers '(("Content-Type" . "application/json"))))
    (xlg :thinking-log "~&Making API request to: ~a" api-url)
    (xlg :thinking-log "JSON string being sent: ~a" json-payload-string)
    (handler-case (drakma:http-request api-url :method :post :content-type "application/json" :content json-payload-string :additional-headers headers :want-stream t :force-ssl t)
      (drakma:drakma-error (c)
        (error "HTTP Request Failed: ~a" c))
      (error (c)
        (error "An unexpected error occurred during the HTTP request: ~a" c)))))

(defun parse-api-resp (resp-stream)
  "Parses the JSON response from the Gemini API response stream using jsown.
   Returns the parsed JSON as a Lisp object (jsown's internal :OBJ format)."
  (handler-case
      (let* ((json-string (uiop:slurp-stream-string resp-stream))
             (pjs (jsown:parse json-string)))
        (xlg :thinking-log "~&Raw JSON string received:~% ~a" pjs)
        pjs)
    (error (c)
      (xlg :error-log "~&Failed to parse JSON response: ~a" c)
      (error "Failed to parse JSON response: ~a" c))))

(defun extract-txt (parsed-json)
  "Extracts the generated text from the parsed Gemini API JSON response using jsown accessors. Returns the text string or NIL if not found."
  (cond ((jsown:keyp parsed-json "error")
         (progn
           (xlg :thinking-log "~&API returned an error: ~a" (jsown:val parsed-json "error"))
           (xlg :answer-log "~&API returned an error: ~a" (jsown:val parsed-json "error"))
           nil))
        ((jsown:keyp parsed-json "candidates")
         (let* ((candidates (jsown:val parsed-json "candidates"))
                (first-candidate (car candidates))
                (content (jsown:val first-candidate "content"))
                (parts (jsown:val content "parts"))
                (first-part (car parts))
                (text (jsown:val first-part "text")))
           (xlg :answer-log "~&Raw answer: ~a" text)
           (setf text (string-trim '(#\Space #\Tab #\Newline) text))
           (format t "~%~a~%" text)
           (if *run-out-s*
               (format *run-out-s* "~a~%" text))
           text))
        (t
         (xlg :error-log "~&Unexpected API response format: ~a" parsed-json)
         (error "Unexpected API response format."))))

;; --- Primitives for Prompt Assembly ---

(defun assemble-context-prompt (ctx-content)
  "Assembles the context section of the prompt."
  (when (s/nz ctx-content)
    (format nil "--- Context Files --~%~a~%--- End Context Files --~%" ctx-content)))

#+nil (defun assemble-input-files-prompt (input-files exit-on-error)
  "Reads and assembles the content of input files into a prompt section."
  ;; TODO use file-packer. Also make public file-packer github
  (format t "aifp: input ~s exit-on-error ~s" input-files exit-on-error)
  (let ((prompt-list nil)
        (all-files-read-ok t))
    (when input-files
      (dolist (file-path input-files)
		(let ((native-file-path (uiop:native-namestring file-path)))
		  (if (uiop:file-exists-p file-path)
              (let ((file-content (uiop:read-file-string file-path #+nil  (uiop:native-namestring file-path))))
				(push (format nil "===BEGIN_FILE: [~a]===~%~a~%===END_FILE: [~a]==="
                              native-file-path
                              file-content
                              native-file-path)
                      prompt-list))
              (progn
				(setf all-files-read-ok nil)
				(xlg :error-log "aifp: Failed to read input file: ~a" native-file-path)
				(format t "aifp: Failed to read input file: ~a~%" native-file-path)
				(if exit-on-error
					(return-from assemble-input-files-prompt (values nil nil))))))))
    (values (format nil "~{~a~%~%~}" (nreverse prompt-list)) all-files-read-ok)))

(defun assemble-input-files-prompt (input-files exit-on-error)
  "Reads and assembles the content of input files into a prompt section, handling common encoding errors."
  (format t "aifp: input ~s exit-on-error ~s" input-files exit-on-error)
  (let ((prompt-list nil)
        (all-files-read-ok t))
    (when input-files
      (dolist (file-path input-files)
        ;; Define all local variables here to ensure they are visible to the handler-case
        (let ((native-file-path (uiop:native-namestring file-path))
              (file-content nil))
          
          (handler-case
              ;; 1. Try reading with the default encoding (usually UTF-8)
              (if (uiop:file-exists-p file-path)
                  ;; Use SETF to assign the value to the outer-scoped variable
                  (setf file-content (uiop:read-file-string file-path))
                  (setf file-content nil))
            
            ;; 2. Catch the specific decoding error (UTF-16LE detected)
            (sb-int:stream-decoding-error (e) 
              (declare (ignore e))
              (format t "aifp: Retrying ~a with :UTF-16LE due to decoding error.~%" native-file-path) 
              ;; Use SETF for the retry content
              (setf file-content (uiop:read-file-string file-path :external-format :utf-16le)))
            
            ;; 3. Catch all other file errors (FileNotFound, permissions, etc.)
            (error (c) 
              (declare (ignore c))
              (setf all-files-read-ok nil)
              (xlg :error-log "aifp: Failed to read input file: ~a" native-file-path)
              (format t "aifp: Failed to read input file: ~a~%" native-file-path)
              (if exit-on-error
                  (return-from assemble-input-files-prompt (values nil nil)))
              ;; Ensure file-content is NIL on unrecoverable error
              (setf file-content nil)))

          ;; This is the main body where file-content and native-file-path are used
          (if file-content
              (push (format nil "===BEGIN_FILE: [~a]===~%~a~%===END_FILE: [~a]==="
                            native-file-path
                            file-content
                            native-file-path)
                    prompt-list))))
    (values (format nil "~{~a~%~%~}" (nreverse prompt-list)) all-files-read-ok))))


(defun assemble-user-prompt (prompt)
  "Formats the user's initial prompt."
  (when (s/nz prompt)
    (format nil "My prompt: ~a" prompt)))

(defun build-full-prompt (ctx-content input-files prompt exit-on-error)
  "Constructs the complete prompt by combining all sections."
  (let ((full-prompt-list nil))
    (multiple-value-bind (input-files-string success-p)
		 (assemble-input-files-prompt input-files exit-on-error)
      (unless success-p
        (return-from build-full-prompt (values nil nil)))
      (when ctx-content
        (push (assemble-context-prompt ctx-content) full-prompt-list))
      (when input-files-string
        (push input-files-string full-prompt-list))
      (when prompt
        (push (assemble-user-prompt prompt) full-prompt-list))
      (let ((assembled-prompt (format nil "~{~a~%~%~}" (nreverse full-prompt-list))))
        (xlg :thinking-log "~&Full assembled prompt for Gemini:~%~a~%" assembled-prompt)
        (values assembled-prompt t)))))

(defun gem-conv (initial-prompt keyname api-url-arg save single-shot exit-on-error &key (model "gemini-2.5-pro"))
  "Handles a single conversation turn with Gemini. 'initial-prompt' is the first message."
  (let ((conversation-history (list (make-message-turn "user" (list (make-text-part initial-prompt))))))
    (loop
      (handler-case
          (let* ((resp-stream (api-req conversation-history keyname api-url-arg :model model))
                 (parsed-json (parse-api-resp resp-stream)))
            (close resp-stream)
            (when save
                (save-cmd (format nil ":save ~a" save)))
            (let ((answer (extract-txt parsed-json)))
              (when (jsown:keyp parsed-json "candidates")
                (push (make-message-turn "model" (list (make-text-part answer))) conversation-history))
              (unless (or (string= answer "quit") (string= answer ":quit") single-shot)
                (format t "~&Single shot is ~s>> " single-shot)
                (finish-output)
                (let ((user-input (read-line)))
                  (when (or (string= user-input "quit") (string= user-input ":quit"))
                    (return))
                  (let ((command (if (s/nz user-input)
                                     (string-trim '(#\Space #\Tab)
                                                  (car (s-s user-input #\Space :rem-empty nil)))
                                     "")))
                    (cond
                      ((string= command ":input")
                       (input-cmd user-input))

					  ((string= command ":save")
                       (save-cmd user-input)) ;; TODO--wrong

                      (t
                       (push (make-message-turn "user" (list (make-text-part user-input))) conversation-history)))))))
            (when single-shot (return)))
        (error (e)
          (xlg :error-log "~&An error occurred: ~a~%" e)
          (format t "~&An error occurred: ~a~%~%" e)
          (when exit-on-error
            (return)))))))

(defun save-cmd (out-to-user &key (if-exists :supersede))
  "Handles the :save command, opening a new file for responses."
  (let* ((args (s-s out-to-user #\Space :rem-empty t))
         (file-path (second args)))
    (when (s/z file-path)
      (format t "~&Please specify a file to save to, e.g., :save my-session.log~%")
      (return-from save-cmd))
    (when *run-out-s*
      (format t "~&Closing previous save file: ~a~%" (file-namestring (pathname *run-out-s*)))
      (close *run-out-s*)
      (setf *run-out-s* nil))
    (handler-case
        (let ((actual-path (if (uiop:absolute-pathname-p file-path)
                               file-path
                               (uiop:merge-pathnames* file-path (uiop:getcwd)))))
          (xlg :thinking-log "~&Opening save file: ~a" actual-path)
          (setf *run-out-s* (open actual-path :direction :output :if-does-not-exist :create :if-exists if-exists))
          (format t "~&Now saving responses to: ~a~%" actual-path))
      (error (c)
        (xlg :error-log "~&Failed to open file for saving: ~a" c)
        (format t "~&Failed to open file for saving: ~a~%" c)
        (setf *run-out-s* nil)))))

(defun input-cmd (user-input)
  "Handles the :input command. Currently just logs the intention."
  (let* ((args (s-s user-input #\Space :rem-empty t))
         (files (second args)))
    (when (s/z files)
      (format t "~&Please specify input files, e.g., :input file1.txt,file2.lisp~%")
      (return-from input-cmd))
    (format t "~&[Note: Input files functionality is part of the initial prompt only in this version. Files will be included in the next request, but not in interactive mode as of yet]~%")))

(defun get-default-context-file ()
  "Returns the path to the default context file if it exists."
  (let ((default-path (uiop:merge-pathnames* "gemini-chat-context.md" (uiop:getcwd))))
    (if (uiop:file-exists-p default-path)
        default-path
        nil)))

(defun proc-ctx-files (file-list)
  "Processes a list of context files and returns a single string of their combined content."
  (when file-list
    (let ((result (make-string-output-stream)))
      (dolist (file file-list)
        (handler-case
            (format result "~&File: ~a~%```~%~a~%```~%~%" (file-namestring file) (uiop:read-file-string file))
          (error (e)
            (xlg :error-log "~&Failed to read context file: ~a" e)
            (format t "~&Failed to read context file: ~a~%" e))))
      (get-output-stream-string result))))

(defun run-chat-with-kw (&key
						   (keyname "personal")
						   (api-url "https://generativelanguage.googleapis.com/v1beta/models/")
						   (gemini-model "gemini-2.5-pro")
						   (context "context.txt")
						   (save "")
						   (tag "chat")
						   (input-files nil)
						   (exit-on-error nil)
						   (single-shot nil)
						   (remaining-args nil))
  
  (let* ((prompt (string-trim '(#\Space #\Tab #\Newline) (format nil "~{~a~^ ~}" remaining-args))))
	(format t "we are opening log files, and prompt is ~s~%" prompt)
	(with-open-log-files ((:thinking-log (format nil "~a-thinking.log" tag) :ymd)
                          (:answer-log (format nil "~a-the-answer.log" tag) :ymd)
                          (:error-log (format nil "~a-error.log" tag) :ymd))
	  (format t " log files opened~%")
      (let* ((actual-context-files (if context
                                       (if (atom context)
										   (list context)
										   context)
                                       (let ((default-ctx (get-default-context-file)))
                                         (if default-ctx (list default-ctx) nil))))
             (ctx-content (proc-ctx-files actual-context-files)))
		(xlg :thinking-log (format nil "actual-context ~s ctx-context ~s" actual-context-files ctx-content ))
        (when (or (s/nz prompt) input-files context)
          (multiple-value-bind (assembled-prompt success-p)
              (build-full-prompt ctx-content input-files prompt exit-on-error)
			(xlg :thinking-log "prompt ~s success ~s" assembled-prompt success-p)
            (unless success-p
              (format t "~&Failed to assemble initial prompt. Exiting.~%")
              (return-from run-chat-with-kw nil))
            (unwind-protect
                 (progn
                   (format t "~&Sending request to Gemini...~%")
                   (gem-conv assembled-prompt keyname api-url save single-shot exit-on-error :model gemini-model))
              ;; Ensure output stream is closed on exit
              (when *run-out-s*
                (format t "~&Closing save file: ~a~%" (file-namestring (pathname *run-out-s*)))
                (close *run-out-s*)
                (setf *run-out-s* nil)))))
        (format t "~&Exiting.~%")))))


